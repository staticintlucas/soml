//! A lightweight [Serde]-compatible [TOML][toml-lang] parser written in Rust
//!
//! # *but why?*
//!
//! The [toml][toml-rs] crate has lots of amazing features, but that makes it really heavy in terms of binary size and compile times.
//! For one of my other projects toml accounted for over 15% of the compiled binary size despite only being used to read one small config file.
//!
//! This project designed to sit at the opposite end of the spectrum, offering basic TOML support for [Serde] with a much smaller footprint.
//! See the comparison table below for a more detailed comparison of TOML crates.
//!
//! We also aim to maintain API-compatibility with the toml crate, so migrating to (or from) soml should be relatively easy.
//!
//! [serde]: https://serde.rs/
//! [toml-lang]: https://toml.io/
//! [toml-rs]: https://github.com/toml-lang/toml
//!
//! # Features
//!
//! Feature    | Default | Description
//! :----------|:-------:|:----------------------------------------------
//! `std`      |    ✅    | Enables `std` support
//! `alloc`    |         | Enables `alloc` support for `no_std` targets
//! `datetime` |    ✅    | Enables support for TOML date-time values
//! `fast`     |         | Disables certain checks required by the TOML spec to improve performance (see below)
//!
//! ## The `fast` feature
//!
//! The `fast` feature disables certain checks required by the TOML spec to improve overall performance.
//! This will produce the same result for any valid TOML document, but the parser will be slightly more permissive of not-technically-valid input.
//! The `fast` feature should not be enabled if strict compliance with the TOML spec is required.
//!
//! The following checks are currently disabled:
//!
//! - Doesn't check comments for valid UTF-8
//! - Doesn't check comments for disallowed control characters
//! - Skips range checking date-time values
//!   - For example, `2024-14-35T25:61:63` will not be rejected as invalid
//!
//! <!-- binsize start -->
//!
//! # Comparison of TOML crates
//!
//! This table is autogenerated by [`binsize/main.py`][binsize/main.py]:
//!
//! ## Read then write a TOML file (round trip)
//!
//! |    Crate     | Version | Size &ast; | Maintained |    TOML version    |
//! |:------------:|:-------:|:----------:|:----------:|:------------------:|
//! |    [soml]    |  0.1.0  |  396 KiB   |     ✅      |        1.0         |
//! |    [toml]    |  0.8.23 |  561 KiB   |     ✅      |        1.0         |
//! |    [toml]    |  0.5.11 |  392 KiB   |     ❌      |        0.5         |
//! | [basic-toml] |  0.1.10 |  390 KiB   |     ❌      | 0.5<br>(partial †) |
//!
//! &ast; *Refers to the size of the `.text` section of a binary which uses the given TOML crates.
//! This is calculated using [`cargo-bloat`][cargo-bloat] with the release profile.* \
//! † *Does not support TOML date-time types.*
//!
//! ## Read a TOML file
//!
//! |    Crate     | Version | Size &ast; | Maintained |    TOML version    |
//! |:------------:|:-------:|:----------:|:----------:|:------------------:|
//! |    [soml]    |  0.1.0  |  362 KiB   |     ✅      |        1.0         |
//! |    [toml]    |  0.8.23 |  498 KiB   |     ✅      |        1.0         |
//! |    [toml]    |  0.5.11 |  379 KiB   |     ❌      |        0.5         |
//! | [basic-toml] |  0.1.10 |  380 KiB   |     ❌      | 0.5<br>(partial †) |
//!
//! &ast; *Refers to the size of the `.text` section of a binary which uses the given TOML crates.
//! This is calculated using [`cargo-bloat`][cargo-bloat] with the release profile.* \
//! † *Does not support TOML date-time types.*
//!
//! [binsize/main.py]: https://github.com/staticintlucas/soml/blob/main/binsize/main.py
//! [cargo-bloat]: https://crates.io/crates/cargo-bloat
//! [soml]: https://crates.io/crates/soml
//! [toml]: https://crates.io/crates/toml
//! [basic-toml]: https://crates.io/crates/basic-toml
//!
//! <!-- binsize end -->

#![cfg_attr(coverage, expect(unstable_features))]
#![cfg_attr(coverage, feature(coverage_attribute))]

#[doc(inline)]
pub use self::de::{from_reader, from_slice, from_str, Deserializer};
#[doc(inline)]
pub use self::map::Table;
#[doc(inline)]
pub use self::ser::{to_string, Serializer};
#[doc(inline)]
pub use self::value::Value;

pub mod de;
pub mod map;
pub mod ser;
pub mod value;
