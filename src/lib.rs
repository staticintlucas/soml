//! A lightweight [Serde]-compatible [TOML][toml-lang] parser written in Rust
//!
//! # *but why?*
//!
//! The [toml][toml-rs] crate has lots of amazing features, but that makes it really heavy in terms of binary size and compile times.
//! For one of my other projects toml accounted for over 15% of the compiled binary size despite only being used to read one small config file.
//!
//! This project designed to sit at the opposite end of the spectrum, offering basic TOML support for [Serde] with a much smaller footprint.
//! See the comparison table below for a more detailed comparison of TOML crates.
//!
//! We also aim to be mostly API-compatibility with the toml crate, so migrating to (or from) soml should be relatively easy.
//!
//! [serde]: https://serde.rs/
//! [toml-lang]: https://toml.io/
//! [toml-rs]: https://github.com/toml-lang/toml
//!
//! # Features
//!
//! Feature    | Default | Description
//! :----------|:-------:|:----------------------------------------------
//! `std`      |    ✅    | Enables `std` support
//! `strict`   |    ✅    | Enables extra checks for strict compliance with the TOML spec (see below)
//! `datetime` |    ✅    | Enables support for TOML date-time values
//!
//! ## The `strict` feature
//!
//! The (enabled by default) `strict` feature adds certain checks required to validate compliance with the TOML spec.
//! These checks can be disabled allowing the parser accept some unambiguous but not-technically-valid TOML.
//! For some applications disabling the `strict` feature could yield a small performance improvement.
//!
//! The following checks are currently disabled without the `strict` feature:
//!
//! - Validate comments are valid UTF-8
//! - Scan comments for disallowed control characters
//! - Range checking on date-time values
//!   - For example, `2024-14-35T25:61:63` is invalid
//!
//! **ℹ️ Important** \
//! The exact list of checks controlled by the `strict` feature is considered an implementation detail and is subject to change.
//! Changes to which not-strictly-valid TOML is accepted when `strict` is disabled is not considered a breaking change.
//!
//! <!-- binsize start -->
//!
//! # Comparison of TOML crates
//!
//! These tables are autogenerated by [`binsize/main.py`][binsize/main.py]:
//!
//! ## Deserialize-only
//!
//! |              Crate              | Version | Size &ast; | Maintained | TOML version |
//! |:-------------------------------:|:-------:|:----------:|:----------:|:------------:|
//! |              [soml]             |  0.1.1  |  103 KiB   |     ✅      |     1.0      |
//! | [soml]<br>(`datetime` disabled) |  0.1.1  |   97 KiB   |     ✅      |    1.0 †     |
//! |              [toml]             |  0.9.2  |  164 KiB   |     ✅      |     1.0      |
//! |              [toml]             |  0.8.23 |  231 KiB   |     ✅      |     1.0      |
//! |              [toml]             |  0.5.11 |  114 KiB   |     ❌      |     0.5      |
//! |           [basic-toml]          |  0.1.10 |  117 KiB   |     ❌      |    0.5 †     |
//!
//! &ast; *Increase in code (`.text`) size compared to just reading/writing a file without (de)serializing.
//! This is calculated using [`cargo-bloat`][cargo-bloat] with the default release profile.* \
//! † *Does not support TOML date-time types.*
//!
//! ## Deserialize and Serialize
//!
//! |              Crate              | Version | Size &ast; | Maintained | TOML version |
//! |:-------------------------------:|:-------:|:----------:|:----------:|:------------:|
//! |              [soml]             |  0.1.1  |  128 KiB   |     ✅      |     1.0      |
//! | [soml]<br>(`datetime` disabled) |  0.1.1  |  122 KiB   |     ✅      |    1.0 †     |
//! |              [toml]             |  0.9.2  |  186 KiB   |     ✅      |     1.0      |
//! |              [toml]             |  0.8.23 |  320 KiB   |     ✅      |     1.0      |
//! |              [toml]             |  0.5.11 |  127 KiB   |     ❌      |     0.5      |
//! |           [basic-toml]          |  0.1.10 |  127 KiB   |     ❌      |    0.5 †     |
//!
//! &ast; *Increase in code (`.text`) size compared to just reading/writing a file without (de)serializing.
//! This is calculated using [`cargo-bloat`][cargo-bloat] with the default release profile.* \
//! † *Does not support TOML date-time types.*
//!
//! [binsize/main.py]: https://github.com/staticintlucas/soml/blob/main/binsize/main.py
//! [cargo-bloat]: https://crates.io/crates/cargo-bloat
//! [soml]: https://crates.io/crates/soml
//! [toml]: https://crates.io/crates/toml
//! [basic-toml]: https://crates.io/crates/basic-toml
//!
//! <!-- binsize end -->

#![cfg_attr(coverage, expect(unstable_features))]
#![cfg_attr(coverage, feature(coverage_attribute))]
#![cfg_attr(not(any(feature = "std", test)), no_std)]

#[doc(inline)]
pub use self::de::{from_reader, from_slice, from_str, Deserializer};
#[doc(inline)]
pub use self::map::Table;
#[doc(inline)]
pub use self::ser::{to_string, Serializer};
#[doc(inline)]
pub use self::value::Value;

pub mod de;
pub mod map;
pub mod ser;
pub mod value;
