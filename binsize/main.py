#!/usr/bin/env python3

import tests.de_only
import tests.ser_de
from utils import *

import re
from textwrap import dedent, indent

HEADER = dedent(f"""\
    # Comparison of TOML crates

    These tables are autogenerated by [`{paths.script()}`][{paths.script()}]:
""")
HEADER_URLS = {
    paths.script(): paths.repo_url(paths.script())
}

FOOTNOTE = dedent("""\
    Refers to the size of the `.text` section of a binary using the given TOML crate.
    This is calculated using [`cargo-bloat`][cargo-bloat] with the release profile.
""")
FOOTNOTE_URLS = {
    "cargo-bloat": "https://crates.io/crates/cargo-bloat",
}

START_TAG = "<!-- binsize start -->"
END_TAG = "<!-- binsize end -->"

def result_to_table(title: str, results: list[tuple[crates.Crate, crates.Results]]) -> str:
    table = markdown.Table(
        title,
        headers=["Crate", "Version", "Size {1}", "Maintained", "TOML version"],
        footnotes=[FOOTNOTE],
    )
    for crate, result in results:
        package = f"[{crate.package}]"
        size = f"{result.size / 1024:.0f} KiB"
        maintained = "✅" if crate.maintained else "❌"
        table.add_row(
            [package, result.version, size, maintained, crate.toml_ver],
            footnotes=crate.footnotes,
        )
    return str(table)

def main():
    crates_toml = paths.script_root() / "crates.toml"
    test_crates = crates.load(crates_toml)

    output = [HEADER.rstrip()]

    ser_de_results = []
    for crate in test_crates:
        result = tests.ser_de.run_test(crate)
        ser_de_results.append((crate, result))
    output.append(result_to_table("Read then write a TOML file (round trip)", ser_de_results))

    de_only_results = []
    for crate in test_crates:
        result = tests.de_only.run_test(crate)
        de_only_results.append((crate, result))
    output.append(result_to_table("Read a TOML file", de_only_results))

    urls = {**HEADER_URLS, **FOOTNOTE_URLS}
    urls.update({crate.package: crate.url for crate in test_crates})
    output.append(markdown.format_urls(urls))

    output = "\n\n".join(output)
    output_comment = "\n".join((
        START_TAG,
        "//!",
        indent(indent(output, " "), "//!", lambda _: True),
        "//!",
        f"//! {END_TAG}",
    ))

    lib_rs = paths.soml_root() / "src" / "lib.rs"
    text = lib_rs.read_text()
    text = re.sub(
        rf"{START_TAG}.*?{END_TAG}",
        output_comment,
        text,
        flags=re.MULTILINE | re.DOTALL
    )
    lib_rs.write_text(text)

if __name__ == "__main__":
    main()
